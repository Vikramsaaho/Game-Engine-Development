1. Setup and Initialization
Install SDL2 on your system.
Include necessary headers.

#include <SDL2/SDL.h>
#include <stdbool.h>

#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600

SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;

bool init() {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        return false;
    }

    window = SDL_CreateWindow("2D Game Engine",
                              SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
                              WINDOW_WIDTH, WINDOW_HEIGHT,
                              SDL_WINDOW_SHOWN);
    if (window == NULL) {
        printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
        return false;
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == NULL) {
        printf("Renderer could not be created! SDL_Error: %s\n", SDL_GetError());
        return false;
    }

    return true;
}

void close() {
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
}
2. //Game Loop and Event Handling//

void gameLoop() {
    bool quit = false;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
            // Handle other events like keyboard and mouse here
        }

        // Clear the screen
        SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0xFF);
        SDL_RenderClear(renderer);

        // Render game objects here

        // Update screen
        SDL_RenderPresent(renderer);
    }
}
//3. Rendering a Simple Object//

void renderObject(int x, int y, int width, int height) {
    SDL_Rect fillRect = {x, y, width, height};
    SDL_SetRenderDrawColor(renderer, 0xFF, 0x00, 0x00, 0xFF);  // Red color
    SDL_RenderFillRect(renderer, &fillRect);
}
//4. Main Function//

int main(int argc, char* args[]) {
    if (!init()) {
        printf("Failed to initialize!\n");
        return -1;
    }

    gameLoop();

    close();

    return 0;
}
//5. Compiling and Running//

./game_engine


6. Expanding the Engine
Input Handling: Add keyboard and mouse input handling for player movement.
Physics: Implement basic physics like gravity, collision detection, and response.
Rendering: Add support for textures and sprites for more complex graphics.
Audio: Integrate SDL_mixer for sound effects and music.
Game Objects: Create a system for managing game entities, including an entity-component system (ECS) for flexibility.


7. Optimization and Features
Optimization: Improve performance by optimizing rendering loops and minimizing state changes in SDL.
Advanced Features: Add support for animations, particle effects, and more complex physics like rigid body dynamics.
